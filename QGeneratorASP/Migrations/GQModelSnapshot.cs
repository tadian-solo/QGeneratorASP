// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QGeneratorASP.Models;

namespace QGeneratorASP.Migrations
{
    [DbContext(typeof(GQ))]
    partial class GQModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QGeneratorASP.Models.Answer", b =>
                {
                    b.Property<int>("Id_answer")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Object")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id_answer");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("QGeneratorASP.Models.Level_of_complexity", b =>
                {
                    b.Property<int>("Id_level")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name_level")
                        .IsRequired()
                        .HasColumnName("Name_level")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Id_level");

                    b.ToTable("Level_of_complexity");
                });

            modelBuilder.Entity("QGeneratorASP.Models.Quest", b =>
                {
                    b.Property<int>("Id_quest")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_quest")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("Id_autor_Fk")
                        .HasColumnName("Id_Autor_FK");

                    b.Property<int>("Id_level_Fk")
                        .HasColumnName("Id_Level_FK");

                    b.Property<int>("Number_of_questions")
                        .HasColumnName("Number_of_questions");

                    b.Property<bool>("Status");

                    b.Property<string>("Thematics")
                        .HasColumnType("text");

                    b.HasKey("Id_quest");

                    b.HasIndex("Id_autor_Fk");

                    b.HasIndex("Id_level_Fk");

                    b.ToTable("Quest");
                });

            modelBuilder.Entity("QGeneratorASP.Models.QuestRiddle", b =>
                {
                    b.Property<int>("Id_Quest_Fk")
                        .HasColumnName("Id_Quest_FK");

                    b.Property<int>("Id_Riddle_Fk")
                        .HasColumnName("Id_Riddle_FK");

                    b.HasKey("Id_Quest_Fk", "Id_Riddle_Fk");

                    b.HasIndex("Id_Riddle_Fk");

                    b.ToTable("Quest_Riddle");
                });

            modelBuilder.Entity("QGeneratorASP.Models.Riddle", b =>
                {
                    b.Property<int>("Id_riddle")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_riddle")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Id_Answer_FK")
                        .HasColumnName("Id_Answer_FK");

                    b.Property<int>("Id_Autor_FK")
                        .HasColumnName("Id_Autor_FK");

                    b.Property<int>("Id_Level_FK")
                        .HasColumnName("Id_Level_FK");

                    b.Property<int>("Id_Type_FK")
                        .HasColumnName("Id_Type_FK");

                    b.Property<bool>("Status");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id_riddle");

                    b.HasIndex("Id_Answer_FK");

                    b.HasIndex("Id_Autor_FK");

                    b.HasIndex("Id_Level_FK");

                    b.HasIndex("Id_Type_FK");

                    b.ToTable("Riddle");
                });

            modelBuilder.Entity("QGeneratorASP.Models.Type_of_question", b =>
                {
                    b.Property<int>("Id_type")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_type")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id_type");

                    b.ToTable("Type_of_question");
                });

            modelBuilder.Entity("QGeneratorASP.Models.User", b =>
                {
                    b.Property<int>("Id_user")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_user")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AccessLevel")
                        .HasColumnName("Access_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id_user");

                    b.ToTable("User");
                });

            modelBuilder.Entity("QGeneratorASP.Models.Quest", b =>
                {
                    b.HasOne("QGeneratorASP.Models.User", "User")
                        .WithMany("Quest")
                        .HasForeignKey("Id_autor_Fk")
                        .HasConstraintName("FK_Quest_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QGeneratorASP.Models.Level_of_complexity", "Level_of_complexity")
                        .WithMany("Quest")
                        .HasForeignKey("Id_level_Fk")
                        .HasConstraintName("FK_Quest_Level_of_complexity")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QGeneratorASP.Models.QuestRiddle", b =>
                {
                    b.HasOne("QGeneratorASP.Models.Quest", "Quest")
                        .WithMany("QuestRiddle")
                        .HasForeignKey("Id_Quest_Fk")
                        .HasConstraintName("FK_Quest_Riddle_Quest");

                    b.HasOne("QGeneratorASP.Models.Riddle", "Riddle")
                        .WithMany("QuestRiddle")
                        .HasForeignKey("Id_Riddle_Fk")
                        .HasConstraintName("FK_Quest_Riddle_Riddle")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QGeneratorASP.Models.Riddle", b =>
                {
                    b.HasOne("QGeneratorASP.Models.Answer", "Answer")
                        .WithMany("Riddle")
                        .HasForeignKey("Id_Answer_FK")
                        .HasConstraintName("FK_Riddle_Answer")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QGeneratorASP.Models.User", "User")
                        .WithMany("Riddle")
                        .HasForeignKey("Id_Autor_FK")
                        .HasConstraintName("FK_Riddle_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QGeneratorASP.Models.Level_of_complexity", "Level_of_complexity")
                        .WithMany("Riddle")
                        .HasForeignKey("Id_Level_FK")
                        .HasConstraintName("FK_Riddle_Level_of_complexity")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QGeneratorASP.Models.Type_of_question", "Type_of_question")
                        .WithMany("Riddle")
                        .HasForeignKey("Id_Type_FK")
                        .HasConstraintName("FK_Riddle_Type_of_question")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
